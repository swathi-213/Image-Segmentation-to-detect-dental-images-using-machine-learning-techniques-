import cv2
import numpy as np
from skimage import filters, exposure
from skimage.color import label2rgb
import matplotlib.pyplot as plt
import skfuzzy as fuzz

# Load the image
image_path = 'dental-image-input.jpg'  
image = cv2.imread(image_path)
if image is None:
    print(f" ERROR: Could not load image at: {image_path}")
    print(" Make sure the file exists and the path is correct.")
    exit()

image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Step 1: Display original image
print("Original Image:")
plt.figure()
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')
plt.show()

# Convert to grayscale for further processing
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Step 2: Apply a Gaussian filter for smoothing (Filtered Image)
filtered_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
print("Gaussian Filtered Image :")
plt.figure()
plt.imshow(filtered_image, cmap='gray')
plt.title('Gaussian Filtered Image ')
plt.axis('off')
plt.show()

# Step 3: Apply a Median filter for noise reduction (Median Filtered Image)
# 5 is the kernel size(adjust as needed)
median_filtered_image = cv2.medianBlur(gray_image, 5)
print("Median Filtered Image:")
plt.figure()
plt.imshow(median_filtered_image, cmap='gray')
plt.title('Median Filtered Image')
plt.axis('off')
plt.show()

# Step 4: Enhance the image using histogram equalization (Enhanced Image)
enhanced_image = exposure.equalize_adapthist(
    median_filtered_image, clip_limit=0.03)  # Use median filtered image
print("Enhanced Image:")
plt.figure()
plt.imshow(enhanced_image, cmap='gray')
plt.title('Enhanced Image')
plt.axis('off')
plt.show()

# Convert the image to 2D array for clustering
image_flat = enhanced_image.reshape((-1, 1))

# Apply Fuzzy C-Means with scikit-fuzzy
cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(
    image_flat.T, c=3, m=2, error=0.005, maxiter=1000, init=None
)

# Get the cluster map
cluster_map = u.argmax(axis=0).reshape(gray_image.shape)

# Display the clustered image
plt.figure()
plt.imshow(cluster_map, cmap='viridis')
plt.title('WFCM Image')
plt.axis('off')
plt.show()

# Find contours from the binary image (e.g., after WFCM)
contours, _ = cv2.findContours(cluster_map.astype(np.uint8),
                               cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Analyze curvature along the contours for boundary refinement
for contour in contours:
    if len(contour) > 2:
        for i in range(1, len(contour) - 1):
            p1 = contour[i - 1][0]
            p2 = contour[i][0]
            p3 = contour[i + 1][0]
            # Approximate curvature calculation (angle between vectors)
            v1 = p2 - p1
            v2 = p3 - p2
            curvature = np.arccos(
                np.clip(np.dot(v1, v2)/(np.linalg.norm(v1) * np.linalg.norm(v2)
                                        ), -1.0, 1.0))
            # Mark or adjust boundary based on curvature threshold
            if curvature < np.pi / 4:  # Adjust this threshold as needed
                cv2.circle(image_rgb, tuple(p2), 1, (255, 0, 0), -1)


# Step 5: Create an indexed image using thresholding (Indexed Image)
threshold = filters.threshold_otsu(enhanced_image)
indexed_image = enhanced_image > threshold
print("Indexed Image:")
plt.figure()
plt.imshow(indexed_image, cmap='gray')
plt.title('Indexed Image')
plt.axis('off')
plt.show()

# Step 6: Apply segmentation using watershed algorithm (Segmented Image)
# Convert indexed_image to the proper format
indexed_image_uint8 = (indexed_image * 255).astype(np.uint8)

# Compute distance transform for segmentation
distance = cv2.distanceTransform(indexed_image_uint8, cv2.DIST_L2, 5)

# Threshold to get the sure foreground
ret, sure_fg = cv2.threshold(distance, 0.7 * distance.max(), 255, 0)
sure_fg = np.uint8(sure_fg)

# Determine the unknown region
unknown = cv2.subtract(indexed_image_uint8, sure_fg)

# Label markers for the watershed algorithm
num_labels, markers = cv2.connectedComponents(sure_fg)
markers = markers + 1  # Increment marker labels so that background is not 0
markers[unknown == 255] = 0  # Mark the unknown region as 0

# Apply watershed algorithm
segmented_image = cv2.watershed(image, markers)

# Convert the result to a format suitable for visualization
segmented_image_rgb = label2rgb(segmented_image, image=image_rgb, bg_label=0)

# Display the segmented image
print("Segmented Image:")
plt.figure()
plt.imshow(segmented_image_rgb)
plt.title('Segmented Image')
plt.axis('off')
plt.show()  # Use plt.show() to properly display the plot
